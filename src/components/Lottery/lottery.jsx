import React, { useState } from 'react';
import './lottery.css';


const Lottery = () => {
  const [prizeResults, setPrizeResults] = useState([]);
  const [userNumber, setUserNumber] = useState('');
  const [randomized, setRandomized] = useState('');

  const generateRandomPrizes = () => {
    const Prize1 = Math.floor(Math.random() * 900) + 100
    const newPrizeResults = 
    [
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1", number: Prize1 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2", number: Math.floor(Math.random() * 900) + 100 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2", number: Math.floor(Math.random() * 900) + 100 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2", number: Math.floor(Math.random() * 900) + 100 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1", number: Prize1+1 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1", number: Prize1-1 },
      { prize: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß", number: Math.floor(Math.random() * 90) + 10 }
    ];

    setPrizeResults(newPrizeResults);
    setRandomized(true);
  };

  const checkPrizes = () => {
    const userLotteryNumber = userNumber;
    // console.log("üöÄ ~ file: App.jsx:28 ~ checkPrizes ~ userLotteryNumber:", userLotteryNumber)
    const lastTwoNums = userNumber.substring(1);
    // console.log("üöÄ ~ file: App.jsx:30 ~ checkPrizes ~ lastTwoNums:", lastTwoNums)
    for (let index = 0; index < prizeResults.length; index++) {
      // console.log(prizeResults[index].number);
      
    }
    const userPrizes = prizeResults.filter(result => result.number == userLotteryNumber);
    // console.log("üöÄ ~ file: App.jsx:31 ~ checkPrizes ~ userPrizes:", userPrizes)
    const userPrizes2 = prizeResults.filter(result=> result.number == lastTwoNums);
    // console.log("üöÄ ~ file: App.jsx:33 ~ checkPrizes ~ userPrizes2:", userPrizes2)
    

    let message = "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•";

    if (userPrizes.length > 0 || userPrizes2.length > 0) {
      message = "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•:\n";
      userPrizes.forEach(prize => {
        message += `${prize.prize} - ${prize.number}\n`;
      });
      userPrizes2.forEach(prize => {
        message += `${prize.prize} - ${prize.number}\n`;
      });
    }

    alert(message);
  };

  return (
    <div className="container mt-5">
      <h1 className="mb-4-kk ">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà Diversition</h1>

      <div className="mb-3-kk">
        <label htmlFor="lotteryNumber" className="form-label-kk"> ‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà :</label>
        <div className='input-kk'>
        <input
          type="number"
          id="lotteryNumber"
          className="form-control-kk"
          min="100"
          max="999"
          value={userNumber}
          onChange={(e) => setUserNumber(e.target.value)}
        />
        </div>
      </div>

      <button
        type="button"
        className="btn btn-primary-kk"
        onClick={checkPrizes}
        disabled={!randomized}
      >
        ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
      </button>

      <button
        type="button"
        className="btn btn-success-kk"
        onClick={generateRandomPrizes}
      >
        ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
      </button>

      <div className="mt-4-kk">
        <h2>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</h2>
        <table className="table-kk">
          <thead>
            <tr>
              <th scope="col">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà</th>
              <th scope="col">‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</th>
            </tr>
          </thead>
          <tbody>
            {prizeResults.map((result, index) => (
              <tr key={index}>
                <td>{result.prize}</td>
                <td>{result.number}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default Lottery;
